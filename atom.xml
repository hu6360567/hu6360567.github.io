<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LvLng&#39;s Blog</title>
  <subtitle>A Tech Blog of Wenbo Hu (@LvLng)</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lvlng.com/"/>
  <updated>2016-05-30T16:34:05.051Z</updated>
  <id>http://lvlng.com/</id>
  
  <author>
    <name>Wenbo Hu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++之String</title>
    <link href="http://lvlng.com/2011/06/04/cpp-string/"/>
    <id>http://lvlng.com/2011/06/04/cpp-string/</id>
    <published>2011-06-03T23:56:27.000Z</published>
    <updated>2016-05-30T16:34:05.051Z</updated>
    
    <content type="html"><![CDATA[<h1 id="标准库string类型和字符串字面值"><a href="#标准库string类型和字符串字面值" class="headerlink" title="标准库string类型和字符串字面值"></a>标准库string类型和字符串字面值</h1><p>　　因为历史原因以及为了与C语言兼容，字符串字面值与标准库<code>std:string</code>类型不是同一种类型。这一点很容易引起混乱，编程时一定要注意区分字符串字面值和string数据类型的使用，这很重要。</p>
<p>　　其中在和字符串字面值连接的问题上体现的最为明显</p>
<p>　　string类型中’+’是一个重载了的运算符，可以连接字符串，但是需要注意的是，‘+’的使用是在string类型的基础之上的：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s1=<span class="string">"hello"</span>;</span><br><span class="line"><span class="built_in">string</span> s2=<span class="string">"world"</span>;</span><br><span class="line"><span class="built_in">string</span> s3=s1+<span class="string">","</span>;</span><br><span class="line"><span class="comment">//正确，s1是string类型，+是string类型的重载运算符</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s4=<span class="string">"hello"</span>+<span class="string">","</span>;</span><br><span class="line"><span class="comment">//错误，+前面是一个字符串，+并没有被重载</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s5=s1+<span class="string">","</span>+<span class="string">"world"</span>;</span><br><span class="line"><span class="comment">//正确，第一个+是重载的运算符，s1+","</span></span><br><span class="line"><span class="comment">//仍然返回一个string类型，所以第二个+仍然是重载的运算符</span></span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;标准库string类型和字符串字面值&quot;&gt;&lt;a href=&quot;#标准库string类型和字符串字面值&quot; class=&quot;headerlink&quot; title=&quot;标准库string类型和字符串字面值&quot;&gt;&lt;/a&gt;标准库string类型和字符串字面值&lt;/h1&gt;&lt;p&gt;　　因为历史
    
    </summary>
    
      <category term="Language" scheme="http://lvlng.com/categories/Language/"/>
    
    
      <category term="C++" scheme="http://lvlng.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++之extern</title>
    <link href="http://lvlng.com/2011/03/23/cpp-extern/"/>
    <id>http://lvlng.com/2011/03/23/cpp-extern/</id>
    <published>2011-03-22T21:46:41.000Z</published>
    <updated>2016-05-30T16:34:05.051Z</updated>
    
    <content type="html"><![CDATA[<h1 id="声明和定义"><a href="#声明和定义" class="headerlink" title="声明和定义"></a>声明和定义</h1><p>　　为了弄清extern，首先要弄清楚<strong>声明（Declare）</strong>和<strong>定义（Define）</strong>的区别。</p>
<blockquote>
<p>变量的定义用于为变量分配存储空间，还可以为变量指定初始值。在一个程序中，变量有且仅有一个定义。</p>
<p>声明用于向程序表明变量的类型和名字。定义也是声明：当定义变量是我们声明了她的类型和名字。可以通过使用extern关键字声明变量名而不定义它。</p>
</blockquote>
<h1 id="const"><a href="#const" class="headerlink" title="const"></a>const</h1><p>　　另外，我们还需要弄清楚<strong>const</strong>的作用。</p>
<p>　　在原文件中，定义一个变量默认是<code>extern</code>的，即是其他文件可见的，若定义一个变量使用<code>const</code>修饰符，则表明此变量不是<code>extern</code>的，即只有本文件可见（与<code>static</code>的功能类似）。</p>
<h1 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h1><font style="color: #ff0000;"><strong>头文件中可以定义类、值在编译时就已知道的<code>const</code>对象和<code>inline</code>函数。这些实体可在多个源文件中定义，只要每个源文件中的定义是相同的。</strong></font>


<h2 id="通过const和头文件的描述"><a href="#通过const和头文件的描述" class="headerlink" title="通过const和头文件的描述"></a>通过const和头文件的描述</h2><p>　　我们不难发现<code>const</code>变量为什么默认不是<code>extern</code>的：在头文件中定义的const常量在每个include的源文件中都会定义一遍，但是由于<code>const</code>常量默认是不带有<code>extern</code>的，所以<code>const</code>常量是只能在本文件中存在的。另外，一般在编译过程中，编译器会将<code>const</code>常量替换成相应的字面值，所以在头文件中定义<code>const</code>常量是合理的，且一般不会造成内存使用过多。</p>
<h2 id="在头文件中的extern"><a href="#在头文件中的extern" class="headerlink" title="在头文件中的extern"></a>在头文件中的extern</h2><p><code>extern</code>的主要目的是用于声明，头文件也是用于声明的，所以头文件中的非<code>const</code>变量必须在前面加上<code>extern</code>表明此变量是外部文件定义的。另外在相应的源文件内，定义相应的变量。</p>
<h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//file1.h</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> a;<span class="comment">//表示声明一个外部的int型a</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a;<span class="comment">//错误，这是一个定义，不应出现在头文件中，若多次被include，会造成重名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> a;<span class="comment">//正确，const默认是其他文件不可见的，只有include的源文件才可见到，并只能在此源文件中存在</span></span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;声明和定义&quot;&gt;&lt;a href=&quot;#声明和定义&quot; class=&quot;headerlink&quot; title=&quot;声明和定义&quot;&gt;&lt;/a&gt;声明和定义&lt;/h1&gt;&lt;p&gt;　　为了弄清extern，首先要弄清楚&lt;strong&gt;声明（Declare）&lt;/strong&gt;和&lt;strong&gt;定义
    
    </summary>
    
      <category term="Language" scheme="http://lvlng.com/categories/Language/"/>
    
    
      <category term="C++" scheme="http://lvlng.com/tags/C/"/>
    
  </entry>
  
</feed>
